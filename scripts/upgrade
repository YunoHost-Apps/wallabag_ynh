#!/bin/bash

set -u

# Load common variables and helpers
. ./_common.sh

# Set app specific variables
app=${!#}
dbname=$app
dbuser=$app

# Retrieve arguments
domain=$(ynh_app_setting_get "$app" domain)
path=$(ynh_app_setting_get "$app" path)
path=${path%/}
dbpass=$(ynh_app_setting_get "$app" mysqlpwd)

# Check destination directory
DESTDIR="/var/www/$app"
[[ ! -d $DESTDIR ]] && ynh_die \
"The destination directory '$DESTDIR' does not exist.\
 The app is not correctly installed, you should remove it first."

# Generate a new random DES key
deskey=$(ynh_string_random 24)

if [[ ! -f "${DESTDIR}/.git/HEAD" ]]; then
    # Create tmp directory and fetch app inside
    TMPDIR=$(ynh_mkdir_tmp)
    init_wallabag "$TMPDIR"

    # Install new app and set permissions
    sudo rm -rf "$DESTDIR"
    sudo mv "$TMPDIR" "$DESTDIR"
    sudo chown -R www-data: "$DESTDIR"
else
    # Update Wallabag sources
    (cd "$DESTDIR" \
     && exec_as www-data git fetch -q origin \
     && exec_as www-data git reset -q --hard "$VERSION") \
      || ynh_die "Unable to update Wallabag sources"

    # Update dependencies using composer
    exec_composer www-data "$DESTDIR" update --no-dev
fi

# Set and copy Wallabag configuration
wb_tmp_conf="../conf/config.inc.php"
sed -i "s@#DBNAME#@${dbname}@g" "$wb_tmp_conf"
sed -i "s@#DBUSER#@${dbuser}@g" "$wb_tmp_conf"
sed -i "s@#DBPASS#@${dbpass}@g" "$wb_tmp_conf"
sed -i "s@#DESKEY#@${deskey}@g" "$wb_tmp_conf"
sudo cp "$wb_tmp_conf" "${DESTDIR}/inc/poche/config.inc.php"

# Clean Wallabag cache and install directories
sudo rm -rf "${DESTDIR}/cache/"*
sudo rm -rf "${DESTDIR}/install"

# Copy and set nginx configuration
nginx_conf="/etc/nginx/conf.d/${domain}.d/${app}.conf"
sed -i "s@#LOCATION#@${path:-/}@g" ../conf/nginx.conf
sed -i "s@#DESTDIR#@${DESTDIR}@g"  ../conf/nginx.conf
sudo cp ../conf/nginx.conf "$nginx_conf"

# Set app name in hooks
sed -i "s@#APP#@${app}@g" ../hooks/post_user_create

# Set SSOwat rules
ynh_app_setting_set "$app" unprotected_uris "/"
ynh_app_setting_delete "$app" skipped_uris

# Reload services
sudo service nginx reload || true
